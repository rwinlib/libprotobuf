// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rexp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rexp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rexp {

namespace {

const ::google::protobuf::Descriptor* REXP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REXP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* REXP_RClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REXP_RBOOLEAN_descriptor_ = NULL;
const ::google::protobuf::Descriptor* STRING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STRING_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMPLX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMPLX_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rexp_2eproto() {
  protobuf_AddDesc_rexp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rexp.proto");
  GOOGLE_CHECK(file != NULL);
  REXP_descriptor_ = file->message_type(0);
  static const int REXP_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, rclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, realvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, booleanvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, stringvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, rawvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, complexvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, rexpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, attrname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, attrvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, nativevalue_),
  };
  REXP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REXP_descriptor_,
      REXP::default_instance_,
      REXP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REXP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REXP));
  REXP_RClass_descriptor_ = REXP_descriptor_->enum_type(0);
  REXP_RBOOLEAN_descriptor_ = REXP_descriptor_->enum_type(1);
  STRING_descriptor_ = file->message_type(1);
  static const int STRING_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRING, strval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRING, isna_),
  };
  STRING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STRING_descriptor_,
      STRING::default_instance_,
      STRING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STRING));
  CMPLX_descriptor_ = file->message_type(2);
  static const int CMPLX_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMPLX, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMPLX, imag_),
  };
  CMPLX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMPLX_descriptor_,
      CMPLX::default_instance_,
      CMPLX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMPLX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMPLX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMPLX));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rexp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REXP_descriptor_, &REXP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STRING_descriptor_, &STRING::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMPLX_descriptor_, &CMPLX::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rexp_2eproto() {
  delete REXP::default_instance_;
  delete REXP_reflection_;
  delete STRING::default_instance_;
  delete STRING_reflection_;
  delete CMPLX::default_instance_;
  delete CMPLX_reflection_;
}

void protobuf_AddDesc_rexp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrexp.proto\022\004rexp\"\324\003\n\004REXP\022!\n\006rclass\030\001 "
    "\002(\0162\021.rexp.REXP.RClass\022\025\n\trealValue\030\002 \003("
    "\001B\002\020\001\022\024\n\010intValue\030\003 \003(\021B\002\020\001\022)\n\014booleanVa"
    "lue\030\004 \003(\0162\023.rexp.REXP.RBOOLEAN\022!\n\013string"
    "Value\030\005 \003(\0132\014.rexp.STRING\022\020\n\010rawValue\030\006 "
    "\001(\014\022!\n\014complexValue\030\007 \003(\0132\013.rexp.CMPLX\022\035"
    "\n\trexpValue\030\010 \003(\0132\n.rexp.REXP\022\020\n\010attrNam"
    "e\030\013 \003(\t\022\035\n\tattrValue\030\014 \003(\0132\n.rexp.REXP\022\023"
    "\n\013nativeValue\030\r \001(\014\"r\n\006RClass\022\n\n\006STRING\020"
    "\000\022\007\n\003RAW\020\001\022\010\n\004REAL\020\002\022\013\n\007COMPLEX\020\003\022\013\n\007INT"
    "EGER\020\004\022\010\n\004LIST\020\005\022\013\n\007LOGICAL\020\006\022\014\n\010NULLTYP"
    "E\020\007\022\n\n\006NATIVE\020\010\" \n\010RBOOLEAN\022\005\n\001F\020\000\022\005\n\001T\020"
    "\001\022\006\n\002NA\020\002\"-\n\006STRING\022\016\n\006strval\030\001 \001(\t\022\023\n\004i"
    "sNA\030\002 \001(\010:\005false\"&\n\005CMPLX\022\017\n\004real\030\001 \001(\001:"
    "\0010\022\014\n\004imag\030\002 \002(\001B\037\n\021org.godhuli.rhipeB\nR"
    "EXPProtos", 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rexp.proto", &protobuf_RegisterTypes);
  REXP::default_instance_ = new REXP();
  STRING::default_instance_ = new STRING();
  CMPLX::default_instance_ = new CMPLX();
  REXP::default_instance_->InitAsDefaultInstance();
  STRING::default_instance_->InitAsDefaultInstance();
  CMPLX::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rexp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rexp_2eproto {
  StaticDescriptorInitializer_rexp_2eproto() {
    protobuf_AddDesc_rexp_2eproto();
  }
} static_descriptor_initializer_rexp_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* REXP_RClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REXP_RClass_descriptor_;
}
bool REXP_RClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const REXP_RClass REXP::STRING;
const REXP_RClass REXP::RAW;
const REXP_RClass REXP::REAL;
const REXP_RClass REXP::COMPLEX;
const REXP_RClass REXP::INTEGER;
const REXP_RClass REXP::LIST;
const REXP_RClass REXP::LOGICAL;
const REXP_RClass REXP::NULLTYPE;
const REXP_RClass REXP::NATIVE;
const REXP_RClass REXP::RClass_MIN;
const REXP_RClass REXP::RClass_MAX;
const int REXP::RClass_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* REXP_RBOOLEAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REXP_RBOOLEAN_descriptor_;
}
bool REXP_RBOOLEAN_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const REXP_RBOOLEAN REXP::F;
const REXP_RBOOLEAN REXP::T;
const REXP_RBOOLEAN REXP::NA;
const REXP_RBOOLEAN REXP::RBOOLEAN_MIN;
const REXP_RBOOLEAN REXP::RBOOLEAN_MAX;
const int REXP::RBOOLEAN_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int REXP::kRclassFieldNumber;
const int REXP::kRealValueFieldNumber;
const int REXP::kIntValueFieldNumber;
const int REXP::kBooleanValueFieldNumber;
const int REXP::kStringValueFieldNumber;
const int REXP::kRawValueFieldNumber;
const int REXP::kComplexValueFieldNumber;
const int REXP::kRexpValueFieldNumber;
const int REXP::kAttrNameFieldNumber;
const int REXP::kAttrValueFieldNumber;
const int REXP::kNativeValueFieldNumber;
#endif  // !_MSC_VER

REXP::REXP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rexp.REXP)
}

void REXP::InitAsDefaultInstance() {
}

REXP::REXP(const REXP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rexp.REXP)
}

void REXP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rclass_ = 0;
  rawvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nativevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REXP::~REXP() {
  // @@protoc_insertion_point(destructor:rexp.REXP)
  SharedDtor();
}

void REXP::SharedDtor() {
  if (rawvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rawvalue_;
  }
  if (nativevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nativevalue_;
  }
  if (this != default_instance_) {
  }
}

void REXP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REXP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REXP_descriptor_;
}

const REXP& REXP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rexp_2eproto();
  return *default_instance_;
}

REXP* REXP::default_instance_ = NULL;

REXP* REXP::New() const {
  return new REXP;
}

void REXP::Clear() {
  if (_has_bits_[0 / 32] & 33) {
    rclass_ = 0;
    if (has_rawvalue()) {
      if (rawvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rawvalue_->clear();
      }
    }
  }
  if (has_nativevalue()) {
    if (nativevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nativevalue_->clear();
    }
  }
  realvalue_.Clear();
  intvalue_.Clear();
  booleanvalue_.Clear();
  stringvalue_.Clear();
  complexvalue_.Clear();
  rexpvalue_.Clear();
  attrname_.Clear();
  attrvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REXP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rexp.REXP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rexp.REXP.RClass rclass = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rexp::REXP_RClass_IsValid(value)) {
            set_rclass(static_cast< ::rexp::REXP_RClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_realValue;
        break;
      }

      // repeated double realValue = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_realValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_realvalue())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_realvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_intValue;
        break;
      }

      // repeated sint32 intValue = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_intvalue())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 26, input, this->mutable_intvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_booleanValue;
        break;
      }

      // repeated .rexp.REXP.RBOOLEAN booleanValue = 4;
      case 4: {
        if (tag == 32) {
         parse_booleanValue:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rexp::REXP_RBOOLEAN_IsValid(value)) {
            add_booleanvalue(static_cast< ::rexp::REXP_RBOOLEAN >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::rexp::REXP_RBOOLEAN_IsValid,
                 this->mutable_booleanvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_booleanValue;
        if (input->ExpectTag(42)) goto parse_stringValue;
        break;
      }

      // repeated .rexp.STRING stringValue = 5;
      case 5: {
        if (tag == 42) {
         parse_stringValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stringvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stringValue;
        if (input->ExpectTag(50)) goto parse_rawValue;
        break;
      }

      // optional bytes rawValue = 6;
      case 6: {
        if (tag == 50) {
         parse_rawValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_complexValue;
        break;
      }

      // repeated .rexp.CMPLX complexValue = 7;
      case 7: {
        if (tag == 58) {
         parse_complexValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complexvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_complexValue;
        if (input->ExpectTag(66)) goto parse_rexpValue;
        break;
      }

      // repeated .rexp.REXP rexpValue = 8;
      case 8: {
        if (tag == 66) {
         parse_rexpValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rexpvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rexpValue;
        if (input->ExpectTag(90)) goto parse_attrName;
        break;
      }

      // repeated string attrName = 11;
      case 11: {
        if (tag == 90) {
         parse_attrName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attrname(this->attrname_size() - 1).data(),
            this->attrname(this->attrname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_attrName;
        if (input->ExpectTag(98)) goto parse_attrValue;
        break;
      }

      // repeated .rexp.REXP attrValue = 12;
      case 12: {
        if (tag == 98) {
         parse_attrValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_attrValue;
        if (input->ExpectTag(106)) goto parse_nativeValue;
        break;
      }

      // optional bytes nativeValue = 13;
      case 13: {
        if (tag == 106) {
         parse_nativeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nativevalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rexp.REXP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rexp.REXP)
  return false;
#undef DO_
}

void REXP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rexp.REXP)
  // required .rexp.REXP.RClass rclass = 1;
  if (has_rclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rclass(), output);
  }

  // repeated double realValue = 2 [packed = true];
  if (this->realvalue_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_realvalue_cached_byte_size_);
  }
  for (int i = 0; i < this->realvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->realvalue(i), output);
  }

  // repeated sint32 intValue = 3 [packed = true];
  if (this->intvalue_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_intvalue_cached_byte_size_);
  }
  for (int i = 0; i < this->intvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->intvalue(i), output);
  }

  // repeated .rexp.REXP.RBOOLEAN booleanValue = 4;
  for (int i = 0; i < this->booleanvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->booleanvalue(i), output);
  }

  // repeated .rexp.STRING stringValue = 5;
  for (int i = 0; i < this->stringvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stringvalue(i), output);
  }

  // optional bytes rawValue = 6;
  if (has_rawvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->rawvalue(), output);
  }

  // repeated .rexp.CMPLX complexValue = 7;
  for (int i = 0; i < this->complexvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->complexvalue(i), output);
  }

  // repeated .rexp.REXP rexpValue = 8;
  for (int i = 0; i < this->rexpvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rexpvalue(i), output);
  }

  // repeated string attrName = 11;
  for (int i = 0; i < this->attrname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->attrname(i).data(), this->attrname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "attrname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->attrname(i), output);
  }

  // repeated .rexp.REXP attrValue = 12;
  for (int i = 0; i < this->attrvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attrvalue(i), output);
  }

  // optional bytes nativeValue = 13;
  if (has_nativevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->nativevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rexp.REXP)
}

::google::protobuf::uint8* REXP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rexp.REXP)
  // required .rexp.REXP.RClass rclass = 1;
  if (has_rclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rclass(), target);
  }

  // repeated double realValue = 2 [packed = true];
  if (this->realvalue_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _realvalue_cached_byte_size_, target);
  }
  for (int i = 0; i < this->realvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->realvalue(i), target);
  }

  // repeated sint32 intValue = 3 [packed = true];
  if (this->intvalue_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _intvalue_cached_byte_size_, target);
  }
  for (int i = 0; i < this->intvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->intvalue(i), target);
  }

  // repeated .rexp.REXP.RBOOLEAN booleanValue = 4;
  for (int i = 0; i < this->booleanvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->booleanvalue(i), target);
  }

  // repeated .rexp.STRING stringValue = 5;
  for (int i = 0; i < this->stringvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stringvalue(i), target);
  }

  // optional bytes rawValue = 6;
  if (has_rawvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->rawvalue(), target);
  }

  // repeated .rexp.CMPLX complexValue = 7;
  for (int i = 0; i < this->complexvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->complexvalue(i), target);
  }

  // repeated .rexp.REXP rexpValue = 8;
  for (int i = 0; i < this->rexpvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rexpvalue(i), target);
  }

  // repeated string attrName = 11;
  for (int i = 0; i < this->attrname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrname(i).data(), this->attrname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attrname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->attrname(i), target);
  }

  // repeated .rexp.REXP attrValue = 12;
  for (int i = 0; i < this->attrvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attrvalue(i), target);
  }

  // optional bytes nativeValue = 13;
  if (has_nativevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->nativevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rexp.REXP)
  return target;
}

int REXP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rexp.REXP.RClass rclass = 1;
    if (has_rclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rclass());
    }

    // optional bytes rawValue = 6;
    if (has_rawvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rawvalue());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bytes nativeValue = 13;
    if (has_nativevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nativevalue());
    }

  }
  // repeated double realValue = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->realvalue_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _realvalue_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 intValue = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->intvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->intvalue(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intvalue_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .rexp.REXP.RBOOLEAN booleanValue = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->booleanvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->booleanvalue(i));
    }
    total_size += 1 * this->booleanvalue_size() + data_size;
  }

  // repeated .rexp.STRING stringValue = 5;
  total_size += 1 * this->stringvalue_size();
  for (int i = 0; i < this->stringvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stringvalue(i));
  }

  // repeated .rexp.CMPLX complexValue = 7;
  total_size += 1 * this->complexvalue_size();
  for (int i = 0; i < this->complexvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complexvalue(i));
  }

  // repeated .rexp.REXP rexpValue = 8;
  total_size += 1 * this->rexpvalue_size();
  for (int i = 0; i < this->rexpvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rexpvalue(i));
  }

  // repeated string attrName = 11;
  total_size += 1 * this->attrname_size();
  for (int i = 0; i < this->attrname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrname(i));
  }

  // repeated .rexp.REXP attrValue = 12;
  total_size += 1 * this->attrvalue_size();
  for (int i = 0; i < this->attrvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REXP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REXP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REXP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REXP::MergeFrom(const REXP& from) {
  GOOGLE_CHECK_NE(&from, this);
  realvalue_.MergeFrom(from.realvalue_);
  intvalue_.MergeFrom(from.intvalue_);
  booleanvalue_.MergeFrom(from.booleanvalue_);
  stringvalue_.MergeFrom(from.stringvalue_);
  complexvalue_.MergeFrom(from.complexvalue_);
  rexpvalue_.MergeFrom(from.rexpvalue_);
  attrname_.MergeFrom(from.attrname_);
  attrvalue_.MergeFrom(from.attrvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rclass()) {
      set_rclass(from.rclass());
    }
    if (from.has_rawvalue()) {
      set_rawvalue(from.rawvalue());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_nativevalue()) {
      set_nativevalue(from.nativevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REXP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REXP::CopyFrom(const REXP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REXP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->complexvalue())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rexpvalue())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrvalue())) return false;
  return true;
}

void REXP::Swap(REXP* other) {
  if (other != this) {
    std::swap(rclass_, other->rclass_);
    realvalue_.Swap(&other->realvalue_);
    intvalue_.Swap(&other->intvalue_);
    booleanvalue_.Swap(&other->booleanvalue_);
    stringvalue_.Swap(&other->stringvalue_);
    std::swap(rawvalue_, other->rawvalue_);
    complexvalue_.Swap(&other->complexvalue_);
    rexpvalue_.Swap(&other->rexpvalue_);
    attrname_.Swap(&other->attrname_);
    attrvalue_.Swap(&other->attrvalue_);
    std::swap(nativevalue_, other->nativevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REXP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REXP_descriptor_;
  metadata.reflection = REXP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STRING::kStrvalFieldNumber;
const int STRING::kIsNAFieldNumber;
#endif  // !_MSC_VER

STRING::STRING()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rexp.STRING)
}

void STRING::InitAsDefaultInstance() {
}

STRING::STRING(const STRING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rexp.STRING)
}

void STRING::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isna_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STRING::~STRING() {
  // @@protoc_insertion_point(destructor:rexp.STRING)
  SharedDtor();
}

void STRING::SharedDtor() {
  if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strval_;
  }
  if (this != default_instance_) {
  }
}

void STRING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STRING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STRING_descriptor_;
}

const STRING& STRING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rexp_2eproto();
  return *default_instance_;
}

STRING* STRING::default_instance_ = NULL;

STRING* STRING::New() const {
  return new STRING;
}

void STRING::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_strval()) {
      if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strval_->clear();
      }
    }
    isna_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STRING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rexp.STRING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strval = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strval().data(), this->strval().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strval");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isNA;
        break;
      }

      // optional bool isNA = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_isNA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isna_)));
          set_has_isna();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rexp.STRING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rexp.STRING)
  return false;
#undef DO_
}

void STRING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rexp.STRING)
  // optional string strval = 1;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strval");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strval(), output);
  }

  // optional bool isNA = 2 [default = false];
  if (has_isna()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rexp.STRING)
}

::google::protobuf::uint8* STRING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rexp.STRING)
  // optional string strval = 1;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strval");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strval(), target);
  }

  // optional bool isNA = 2 [default = false];
  if (has_isna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rexp.STRING)
  return target;
}

int STRING::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strval = 1;
    if (has_strval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strval());
    }

    // optional bool isNA = 2 [default = false];
    if (has_isna()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STRING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STRING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STRING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STRING::MergeFrom(const STRING& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strval()) {
      set_strval(from.strval());
    }
    if (from.has_isna()) {
      set_isna(from.isna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STRING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STRING::CopyFrom(const STRING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STRING::IsInitialized() const {

  return true;
}

void STRING::Swap(STRING* other) {
  if (other != this) {
    std::swap(strval_, other->strval_);
    std::swap(isna_, other->isna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STRING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STRING_descriptor_;
  metadata.reflection = STRING_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMPLX::kRealFieldNumber;
const int CMPLX::kImagFieldNumber;
#endif  // !_MSC_VER

CMPLX::CMPLX()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rexp.CMPLX)
}

void CMPLX::InitAsDefaultInstance() {
}

CMPLX::CMPLX(const CMPLX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rexp.CMPLX)
}

void CMPLX::SharedCtor() {
  _cached_size_ = 0;
  real_ = 0;
  imag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMPLX::~CMPLX() {
  // @@protoc_insertion_point(destructor:rexp.CMPLX)
  SharedDtor();
}

void CMPLX::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMPLX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMPLX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMPLX_descriptor_;
}

const CMPLX& CMPLX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rexp_2eproto();
  return *default_instance_;
}

CMPLX* CMPLX::default_instance_ = NULL;

CMPLX* CMPLX::New() const {
  return new CMPLX;
}

void CMPLX::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMPLX*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(real_, imag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMPLX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rexp.CMPLX)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double real = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_)));
          set_has_real();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_imag;
        break;
      }

      // required double imag = 2;
      case 2: {
        if (tag == 17) {
         parse_imag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imag_)));
          set_has_imag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rexp.CMPLX)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rexp.CMPLX)
  return false;
#undef DO_
}

void CMPLX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rexp.CMPLX)
  // optional double real = 1 [default = 0];
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->real(), output);
  }

  // required double imag = 2;
  if (has_imag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->imag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rexp.CMPLX)
}

::google::protobuf::uint8* CMPLX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rexp.CMPLX)
  // optional double real = 1 [default = 0];
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->real(), target);
  }

  // required double imag = 2;
  if (has_imag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->imag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rexp.CMPLX)
  return target;
}

int CMPLX::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double real = 1 [default = 0];
    if (has_real()) {
      total_size += 1 + 8;
    }

    // required double imag = 2;
    if (has_imag()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMPLX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMPLX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMPLX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMPLX::MergeFrom(const CMPLX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real()) {
      set_real(from.real());
    }
    if (from.has_imag()) {
      set_imag(from.imag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMPLX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMPLX::CopyFrom(const CMPLX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMPLX::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CMPLX::Swap(CMPLX* other) {
  if (other != this) {
    std::swap(real_, other->real_);
    std::swap(imag_, other->imag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMPLX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMPLX_descriptor_;
  metadata.reflection = CMPLX_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rexp

// @@protoc_insertion_point(global_scope)
