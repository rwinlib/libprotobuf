// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rexp.proto

#ifndef PROTOBUF_rexp_2eproto__INCLUDED
#define PROTOBUF_rexp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rexp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rexp_2eproto();
void protobuf_AssignDesc_rexp_2eproto();
void protobuf_ShutdownFile_rexp_2eproto();

class REXP;
class STRING;
class CMPLX;

enum REXP_RClass {
  REXP_RClass_STRING = 0,
  REXP_RClass_RAW = 1,
  REXP_RClass_REAL = 2,
  REXP_RClass_COMPLEX = 3,
  REXP_RClass_INTEGER = 4,
  REXP_RClass_LIST = 5,
  REXP_RClass_LOGICAL = 6,
  REXP_RClass_NULLTYPE = 7,
  REXP_RClass_NATIVE = 8
};
bool REXP_RClass_IsValid(int value);
const REXP_RClass REXP_RClass_RClass_MIN = REXP_RClass_STRING;
const REXP_RClass REXP_RClass_RClass_MAX = REXP_RClass_NATIVE;
const int REXP_RClass_RClass_ARRAYSIZE = REXP_RClass_RClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* REXP_RClass_descriptor();
inline const ::std::string& REXP_RClass_Name(REXP_RClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    REXP_RClass_descriptor(), value);
}
inline bool REXP_RClass_Parse(
    const ::std::string& name, REXP_RClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REXP_RClass>(
    REXP_RClass_descriptor(), name, value);
}
enum REXP_RBOOLEAN {
  REXP_RBOOLEAN_F = 0,
  REXP_RBOOLEAN_T = 1,
  REXP_RBOOLEAN_NA = 2
};
bool REXP_RBOOLEAN_IsValid(int value);
const REXP_RBOOLEAN REXP_RBOOLEAN_RBOOLEAN_MIN = REXP_RBOOLEAN_F;
const REXP_RBOOLEAN REXP_RBOOLEAN_RBOOLEAN_MAX = REXP_RBOOLEAN_NA;
const int REXP_RBOOLEAN_RBOOLEAN_ARRAYSIZE = REXP_RBOOLEAN_RBOOLEAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* REXP_RBOOLEAN_descriptor();
inline const ::std::string& REXP_RBOOLEAN_Name(REXP_RBOOLEAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    REXP_RBOOLEAN_descriptor(), value);
}
inline bool REXP_RBOOLEAN_Parse(
    const ::std::string& name, REXP_RBOOLEAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REXP_RBOOLEAN>(
    REXP_RBOOLEAN_descriptor(), name, value);
}
// ===================================================================

class REXP : public ::google::protobuf::Message {
 public:
  REXP();
  virtual ~REXP();

  REXP(const REXP& from);

  inline REXP& operator=(const REXP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REXP& default_instance();

  void Swap(REXP* other);

  // implements Message ----------------------------------------------

  REXP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REXP& from);
  void MergeFrom(const REXP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef REXP_RClass RClass;
  static const RClass STRING = REXP_RClass_STRING;
  static const RClass RAW = REXP_RClass_RAW;
  static const RClass REAL = REXP_RClass_REAL;
  static const RClass COMPLEX = REXP_RClass_COMPLEX;
  static const RClass INTEGER = REXP_RClass_INTEGER;
  static const RClass LIST = REXP_RClass_LIST;
  static const RClass LOGICAL = REXP_RClass_LOGICAL;
  static const RClass NULLTYPE = REXP_RClass_NULLTYPE;
  static const RClass NATIVE = REXP_RClass_NATIVE;
  static inline bool RClass_IsValid(int value) {
    return REXP_RClass_IsValid(value);
  }
  static const RClass RClass_MIN =
    REXP_RClass_RClass_MIN;
  static const RClass RClass_MAX =
    REXP_RClass_RClass_MAX;
  static const int RClass_ARRAYSIZE =
    REXP_RClass_RClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RClass_descriptor() {
    return REXP_RClass_descriptor();
  }
  static inline const ::std::string& RClass_Name(RClass value) {
    return REXP_RClass_Name(value);
  }
  static inline bool RClass_Parse(const ::std::string& name,
      RClass* value) {
    return REXP_RClass_Parse(name, value);
  }

  typedef REXP_RBOOLEAN RBOOLEAN;
  static const RBOOLEAN F = REXP_RBOOLEAN_F;
  static const RBOOLEAN T = REXP_RBOOLEAN_T;
  static const RBOOLEAN NA = REXP_RBOOLEAN_NA;
  static inline bool RBOOLEAN_IsValid(int value) {
    return REXP_RBOOLEAN_IsValid(value);
  }
  static const RBOOLEAN RBOOLEAN_MIN =
    REXP_RBOOLEAN_RBOOLEAN_MIN;
  static const RBOOLEAN RBOOLEAN_MAX =
    REXP_RBOOLEAN_RBOOLEAN_MAX;
  static const int RBOOLEAN_ARRAYSIZE =
    REXP_RBOOLEAN_RBOOLEAN_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RBOOLEAN_descriptor() {
    return REXP_RBOOLEAN_descriptor();
  }
  static inline const ::std::string& RBOOLEAN_Name(RBOOLEAN value) {
    return REXP_RBOOLEAN_Name(value);
  }
  static inline bool RBOOLEAN_Parse(const ::std::string& name,
      RBOOLEAN* value) {
    return REXP_RBOOLEAN_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .rexp.REXP.RClass rclass = 1;
  inline bool has_rclass() const;
  inline void clear_rclass();
  static const int kRclassFieldNumber = 1;
  inline ::rexp::REXP_RClass rclass() const;
  inline void set_rclass(::rexp::REXP_RClass value);

  // repeated double realValue = 2 [packed = true];
  inline int realvalue_size() const;
  inline void clear_realvalue();
  static const int kRealValueFieldNumber = 2;
  inline double realvalue(int index) const;
  inline void set_realvalue(int index, double value);
  inline void add_realvalue(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      realvalue() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_realvalue();

  // repeated sint32 intValue = 3 [packed = true];
  inline int intvalue_size() const;
  inline void clear_intvalue();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 intvalue(int index) const;
  inline void set_intvalue(int index, ::google::protobuf::int32 value);
  inline void add_intvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      intvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_intvalue();

  // repeated .rexp.REXP.RBOOLEAN booleanValue = 4;
  inline int booleanvalue_size() const;
  inline void clear_booleanvalue();
  static const int kBooleanValueFieldNumber = 4;
  inline ::rexp::REXP_RBOOLEAN booleanvalue(int index) const;
  inline void set_booleanvalue(int index, ::rexp::REXP_RBOOLEAN value);
  inline void add_booleanvalue(::rexp::REXP_RBOOLEAN value);
  inline const ::google::protobuf::RepeatedField<int>& booleanvalue() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_booleanvalue();

  // repeated .rexp.STRING stringValue = 5;
  inline int stringvalue_size() const;
  inline void clear_stringvalue();
  static const int kStringValueFieldNumber = 5;
  inline const ::rexp::STRING& stringvalue(int index) const;
  inline ::rexp::STRING* mutable_stringvalue(int index);
  inline ::rexp::STRING* add_stringvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::rexp::STRING >&
      stringvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::rexp::STRING >*
      mutable_stringvalue();

  // optional bytes rawValue = 6;
  inline bool has_rawvalue() const;
  inline void clear_rawvalue();
  static const int kRawValueFieldNumber = 6;
  inline const ::std::string& rawvalue() const;
  inline void set_rawvalue(const ::std::string& value);
  inline void set_rawvalue(const char* value);
  inline void set_rawvalue(const void* value, size_t size);
  inline ::std::string* mutable_rawvalue();
  inline ::std::string* release_rawvalue();
  inline void set_allocated_rawvalue(::std::string* rawvalue);

  // repeated .rexp.CMPLX complexValue = 7;
  inline int complexvalue_size() const;
  inline void clear_complexvalue();
  static const int kComplexValueFieldNumber = 7;
  inline const ::rexp::CMPLX& complexvalue(int index) const;
  inline ::rexp::CMPLX* mutable_complexvalue(int index);
  inline ::rexp::CMPLX* add_complexvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::rexp::CMPLX >&
      complexvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::rexp::CMPLX >*
      mutable_complexvalue();

  // repeated .rexp.REXP rexpValue = 8;
  inline int rexpvalue_size() const;
  inline void clear_rexpvalue();
  static const int kRexpValueFieldNumber = 8;
  inline const ::rexp::REXP& rexpvalue(int index) const;
  inline ::rexp::REXP* mutable_rexpvalue(int index);
  inline ::rexp::REXP* add_rexpvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::rexp::REXP >&
      rexpvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::rexp::REXP >*
      mutable_rexpvalue();

  // repeated string attrName = 11;
  inline int attrname_size() const;
  inline void clear_attrname();
  static const int kAttrNameFieldNumber = 11;
  inline const ::std::string& attrname(int index) const;
  inline ::std::string* mutable_attrname(int index);
  inline void set_attrname(int index, const ::std::string& value);
  inline void set_attrname(int index, const char* value);
  inline void set_attrname(int index, const char* value, size_t size);
  inline ::std::string* add_attrname();
  inline void add_attrname(const ::std::string& value);
  inline void add_attrname(const char* value);
  inline void add_attrname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attrname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attrname();

  // repeated .rexp.REXP attrValue = 12;
  inline int attrvalue_size() const;
  inline void clear_attrvalue();
  static const int kAttrValueFieldNumber = 12;
  inline const ::rexp::REXP& attrvalue(int index) const;
  inline ::rexp::REXP* mutable_attrvalue(int index);
  inline ::rexp::REXP* add_attrvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::rexp::REXP >&
      attrvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::rexp::REXP >*
      mutable_attrvalue();

  // optional bytes nativeValue = 13;
  inline bool has_nativevalue() const;
  inline void clear_nativevalue();
  static const int kNativeValueFieldNumber = 13;
  inline const ::std::string& nativevalue() const;
  inline void set_nativevalue(const ::std::string& value);
  inline void set_nativevalue(const char* value);
  inline void set_nativevalue(const void* value, size_t size);
  inline ::std::string* mutable_nativevalue();
  inline ::std::string* release_nativevalue();
  inline void set_allocated_nativevalue(::std::string* nativevalue);

  // @@protoc_insertion_point(class_scope:rexp.REXP)
 private:
  inline void set_has_rclass();
  inline void clear_has_rclass();
  inline void set_has_rawvalue();
  inline void clear_has_rawvalue();
  inline void set_has_nativevalue();
  inline void clear_has_nativevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > realvalue_;
  mutable int _realvalue_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > intvalue_;
  mutable int _intvalue_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> booleanvalue_;
  ::google::protobuf::RepeatedPtrField< ::rexp::STRING > stringvalue_;
  ::std::string* rawvalue_;
  ::google::protobuf::RepeatedPtrField< ::rexp::CMPLX > complexvalue_;
  ::google::protobuf::RepeatedPtrField< ::rexp::REXP > rexpvalue_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attrname_;
  ::google::protobuf::RepeatedPtrField< ::rexp::REXP > attrvalue_;
  ::std::string* nativevalue_;
  int rclass_;
  friend void  protobuf_AddDesc_rexp_2eproto();
  friend void protobuf_AssignDesc_rexp_2eproto();
  friend void protobuf_ShutdownFile_rexp_2eproto();

  void InitAsDefaultInstance();
  static REXP* default_instance_;
};
// -------------------------------------------------------------------

class STRING : public ::google::protobuf::Message {
 public:
  STRING();
  virtual ~STRING();

  STRING(const STRING& from);

  inline STRING& operator=(const STRING& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STRING& default_instance();

  void Swap(STRING* other);

  // implements Message ----------------------------------------------

  STRING* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STRING& from);
  void MergeFrom(const STRING& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strval = 1;
  inline bool has_strval() const;
  inline void clear_strval();
  static const int kStrvalFieldNumber = 1;
  inline const ::std::string& strval() const;
  inline void set_strval(const ::std::string& value);
  inline void set_strval(const char* value);
  inline void set_strval(const char* value, size_t size);
  inline ::std::string* mutable_strval();
  inline ::std::string* release_strval();
  inline void set_allocated_strval(::std::string* strval);

  // optional bool isNA = 2 [default = false];
  inline bool has_isna() const;
  inline void clear_isna();
  static const int kIsNAFieldNumber = 2;
  inline bool isna() const;
  inline void set_isna(bool value);

  // @@protoc_insertion_point(class_scope:rexp.STRING)
 private:
  inline void set_has_strval();
  inline void clear_has_strval();
  inline void set_has_isna();
  inline void clear_has_isna();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strval_;
  bool isna_;
  friend void  protobuf_AddDesc_rexp_2eproto();
  friend void protobuf_AssignDesc_rexp_2eproto();
  friend void protobuf_ShutdownFile_rexp_2eproto();

  void InitAsDefaultInstance();
  static STRING* default_instance_;
};
// -------------------------------------------------------------------

class CMPLX : public ::google::protobuf::Message {
 public:
  CMPLX();
  virtual ~CMPLX();

  CMPLX(const CMPLX& from);

  inline CMPLX& operator=(const CMPLX& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMPLX& default_instance();

  void Swap(CMPLX* other);

  // implements Message ----------------------------------------------

  CMPLX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMPLX& from);
  void MergeFrom(const CMPLX& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double real = 1 [default = 0];
  inline bool has_real() const;
  inline void clear_real();
  static const int kRealFieldNumber = 1;
  inline double real() const;
  inline void set_real(double value);

  // required double imag = 2;
  inline bool has_imag() const;
  inline void clear_imag();
  static const int kImagFieldNumber = 2;
  inline double imag() const;
  inline void set_imag(double value);

  // @@protoc_insertion_point(class_scope:rexp.CMPLX)
 private:
  inline void set_has_real();
  inline void clear_has_real();
  inline void set_has_imag();
  inline void clear_has_imag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double real_;
  double imag_;
  friend void  protobuf_AddDesc_rexp_2eproto();
  friend void protobuf_AssignDesc_rexp_2eproto();
  friend void protobuf_ShutdownFile_rexp_2eproto();

  void InitAsDefaultInstance();
  static CMPLX* default_instance_;
};
// ===================================================================


// ===================================================================

// REXP

// required .rexp.REXP.RClass rclass = 1;
inline bool REXP::has_rclass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REXP::set_has_rclass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REXP::clear_has_rclass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REXP::clear_rclass() {
  rclass_ = 0;
  clear_has_rclass();
}
inline ::rexp::REXP_RClass REXP::rclass() const {
  // @@protoc_insertion_point(field_get:rexp.REXP.rclass)
  return static_cast< ::rexp::REXP_RClass >(rclass_);
}
inline void REXP::set_rclass(::rexp::REXP_RClass value) {
  assert(::rexp::REXP_RClass_IsValid(value));
  set_has_rclass();
  rclass_ = value;
  // @@protoc_insertion_point(field_set:rexp.REXP.rclass)
}

// repeated double realValue = 2 [packed = true];
inline int REXP::realvalue_size() const {
  return realvalue_.size();
}
inline void REXP::clear_realvalue() {
  realvalue_.Clear();
}
inline double REXP::realvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.realValue)
  return realvalue_.Get(index);
}
inline void REXP::set_realvalue(int index, double value) {
  realvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:rexp.REXP.realValue)
}
inline void REXP::add_realvalue(double value) {
  realvalue_.Add(value);
  // @@protoc_insertion_point(field_add:rexp.REXP.realValue)
}
inline const ::google::protobuf::RepeatedField< double >&
REXP::realvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.realValue)
  return realvalue_;
}
inline ::google::protobuf::RepeatedField< double >*
REXP::mutable_realvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.realValue)
  return &realvalue_;
}

// repeated sint32 intValue = 3 [packed = true];
inline int REXP::intvalue_size() const {
  return intvalue_.size();
}
inline void REXP::clear_intvalue() {
  intvalue_.Clear();
}
inline ::google::protobuf::int32 REXP::intvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.intValue)
  return intvalue_.Get(index);
}
inline void REXP::set_intvalue(int index, ::google::protobuf::int32 value) {
  intvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:rexp.REXP.intValue)
}
inline void REXP::add_intvalue(::google::protobuf::int32 value) {
  intvalue_.Add(value);
  // @@protoc_insertion_point(field_add:rexp.REXP.intValue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
REXP::intvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.intValue)
  return intvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
REXP::mutable_intvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.intValue)
  return &intvalue_;
}

// repeated .rexp.REXP.RBOOLEAN booleanValue = 4;
inline int REXP::booleanvalue_size() const {
  return booleanvalue_.size();
}
inline void REXP::clear_booleanvalue() {
  booleanvalue_.Clear();
}
inline ::rexp::REXP_RBOOLEAN REXP::booleanvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.booleanValue)
  return static_cast< ::rexp::REXP_RBOOLEAN >(booleanvalue_.Get(index));
}
inline void REXP::set_booleanvalue(int index, ::rexp::REXP_RBOOLEAN value) {
  assert(::rexp::REXP_RBOOLEAN_IsValid(value));
  booleanvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:rexp.REXP.booleanValue)
}
inline void REXP::add_booleanvalue(::rexp::REXP_RBOOLEAN value) {
  assert(::rexp::REXP_RBOOLEAN_IsValid(value));
  booleanvalue_.Add(value);
  // @@protoc_insertion_point(field_add:rexp.REXP.booleanValue)
}
inline const ::google::protobuf::RepeatedField<int>&
REXP::booleanvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.booleanValue)
  return booleanvalue_;
}
inline ::google::protobuf::RepeatedField<int>*
REXP::mutable_booleanvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.booleanValue)
  return &booleanvalue_;
}

// repeated .rexp.STRING stringValue = 5;
inline int REXP::stringvalue_size() const {
  return stringvalue_.size();
}
inline void REXP::clear_stringvalue() {
  stringvalue_.Clear();
}
inline const ::rexp::STRING& REXP::stringvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.stringValue)
  return stringvalue_.Get(index);
}
inline ::rexp::STRING* REXP::mutable_stringvalue(int index) {
  // @@protoc_insertion_point(field_mutable:rexp.REXP.stringValue)
  return stringvalue_.Mutable(index);
}
inline ::rexp::STRING* REXP::add_stringvalue() {
  // @@protoc_insertion_point(field_add:rexp.REXP.stringValue)
  return stringvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rexp::STRING >&
REXP::stringvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.stringValue)
  return stringvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::rexp::STRING >*
REXP::mutable_stringvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.stringValue)
  return &stringvalue_;
}

// optional bytes rawValue = 6;
inline bool REXP::has_rawvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void REXP::set_has_rawvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void REXP::clear_has_rawvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void REXP::clear_rawvalue() {
  if (rawvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawvalue_->clear();
  }
  clear_has_rawvalue();
}
inline const ::std::string& REXP::rawvalue() const {
  // @@protoc_insertion_point(field_get:rexp.REXP.rawValue)
  return *rawvalue_;
}
inline void REXP::set_rawvalue(const ::std::string& value) {
  set_has_rawvalue();
  if (rawvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawvalue_ = new ::std::string;
  }
  rawvalue_->assign(value);
  // @@protoc_insertion_point(field_set:rexp.REXP.rawValue)
}
inline void REXP::set_rawvalue(const char* value) {
  set_has_rawvalue();
  if (rawvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawvalue_ = new ::std::string;
  }
  rawvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:rexp.REXP.rawValue)
}
inline void REXP::set_rawvalue(const void* value, size_t size) {
  set_has_rawvalue();
  if (rawvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawvalue_ = new ::std::string;
  }
  rawvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rexp.REXP.rawValue)
}
inline ::std::string* REXP::mutable_rawvalue() {
  set_has_rawvalue();
  if (rawvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rexp.REXP.rawValue)
  return rawvalue_;
}
inline ::std::string* REXP::release_rawvalue() {
  clear_has_rawvalue();
  if (rawvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rawvalue_;
    rawvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void REXP::set_allocated_rawvalue(::std::string* rawvalue) {
  if (rawvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rawvalue_;
  }
  if (rawvalue) {
    set_has_rawvalue();
    rawvalue_ = rawvalue;
  } else {
    clear_has_rawvalue();
    rawvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rexp.REXP.rawValue)
}

// repeated .rexp.CMPLX complexValue = 7;
inline int REXP::complexvalue_size() const {
  return complexvalue_.size();
}
inline void REXP::clear_complexvalue() {
  complexvalue_.Clear();
}
inline const ::rexp::CMPLX& REXP::complexvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.complexValue)
  return complexvalue_.Get(index);
}
inline ::rexp::CMPLX* REXP::mutable_complexvalue(int index) {
  // @@protoc_insertion_point(field_mutable:rexp.REXP.complexValue)
  return complexvalue_.Mutable(index);
}
inline ::rexp::CMPLX* REXP::add_complexvalue() {
  // @@protoc_insertion_point(field_add:rexp.REXP.complexValue)
  return complexvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rexp::CMPLX >&
REXP::complexvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.complexValue)
  return complexvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::rexp::CMPLX >*
REXP::mutable_complexvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.complexValue)
  return &complexvalue_;
}

// repeated .rexp.REXP rexpValue = 8;
inline int REXP::rexpvalue_size() const {
  return rexpvalue_.size();
}
inline void REXP::clear_rexpvalue() {
  rexpvalue_.Clear();
}
inline const ::rexp::REXP& REXP::rexpvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.rexpValue)
  return rexpvalue_.Get(index);
}
inline ::rexp::REXP* REXP::mutable_rexpvalue(int index) {
  // @@protoc_insertion_point(field_mutable:rexp.REXP.rexpValue)
  return rexpvalue_.Mutable(index);
}
inline ::rexp::REXP* REXP::add_rexpvalue() {
  // @@protoc_insertion_point(field_add:rexp.REXP.rexpValue)
  return rexpvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rexp::REXP >&
REXP::rexpvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.rexpValue)
  return rexpvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::rexp::REXP >*
REXP::mutable_rexpvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.rexpValue)
  return &rexpvalue_;
}

// repeated string attrName = 11;
inline int REXP::attrname_size() const {
  return attrname_.size();
}
inline void REXP::clear_attrname() {
  attrname_.Clear();
}
inline const ::std::string& REXP::attrname(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.attrName)
  return attrname_.Get(index);
}
inline ::std::string* REXP::mutable_attrname(int index) {
  // @@protoc_insertion_point(field_mutable:rexp.REXP.attrName)
  return attrname_.Mutable(index);
}
inline void REXP::set_attrname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rexp.REXP.attrName)
  attrname_.Mutable(index)->assign(value);
}
inline void REXP::set_attrname(int index, const char* value) {
  attrname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rexp.REXP.attrName)
}
inline void REXP::set_attrname(int index, const char* value, size_t size) {
  attrname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rexp.REXP.attrName)
}
inline ::std::string* REXP::add_attrname() {
  return attrname_.Add();
}
inline void REXP::add_attrname(const ::std::string& value) {
  attrname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rexp.REXP.attrName)
}
inline void REXP::add_attrname(const char* value) {
  attrname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rexp.REXP.attrName)
}
inline void REXP::add_attrname(const char* value, size_t size) {
  attrname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rexp.REXP.attrName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
REXP::attrname() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.attrName)
  return attrname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
REXP::mutable_attrname() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.attrName)
  return &attrname_;
}

// repeated .rexp.REXP attrValue = 12;
inline int REXP::attrvalue_size() const {
  return attrvalue_.size();
}
inline void REXP::clear_attrvalue() {
  attrvalue_.Clear();
}
inline const ::rexp::REXP& REXP::attrvalue(int index) const {
  // @@protoc_insertion_point(field_get:rexp.REXP.attrValue)
  return attrvalue_.Get(index);
}
inline ::rexp::REXP* REXP::mutable_attrvalue(int index) {
  // @@protoc_insertion_point(field_mutable:rexp.REXP.attrValue)
  return attrvalue_.Mutable(index);
}
inline ::rexp::REXP* REXP::add_attrvalue() {
  // @@protoc_insertion_point(field_add:rexp.REXP.attrValue)
  return attrvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rexp::REXP >&
REXP::attrvalue() const {
  // @@protoc_insertion_point(field_list:rexp.REXP.attrValue)
  return attrvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::rexp::REXP >*
REXP::mutable_attrvalue() {
  // @@protoc_insertion_point(field_mutable_list:rexp.REXP.attrValue)
  return &attrvalue_;
}

// optional bytes nativeValue = 13;
inline bool REXP::has_nativevalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void REXP::set_has_nativevalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void REXP::clear_has_nativevalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void REXP::clear_nativevalue() {
  if (nativevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nativevalue_->clear();
  }
  clear_has_nativevalue();
}
inline const ::std::string& REXP::nativevalue() const {
  // @@protoc_insertion_point(field_get:rexp.REXP.nativeValue)
  return *nativevalue_;
}
inline void REXP::set_nativevalue(const ::std::string& value) {
  set_has_nativevalue();
  if (nativevalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nativevalue_ = new ::std::string;
  }
  nativevalue_->assign(value);
  // @@protoc_insertion_point(field_set:rexp.REXP.nativeValue)
}
inline void REXP::set_nativevalue(const char* value) {
  set_has_nativevalue();
  if (nativevalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nativevalue_ = new ::std::string;
  }
  nativevalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:rexp.REXP.nativeValue)
}
inline void REXP::set_nativevalue(const void* value, size_t size) {
  set_has_nativevalue();
  if (nativevalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nativevalue_ = new ::std::string;
  }
  nativevalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rexp.REXP.nativeValue)
}
inline ::std::string* REXP::mutable_nativevalue() {
  set_has_nativevalue();
  if (nativevalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nativevalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rexp.REXP.nativeValue)
  return nativevalue_;
}
inline ::std::string* REXP::release_nativevalue() {
  clear_has_nativevalue();
  if (nativevalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nativevalue_;
    nativevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void REXP::set_allocated_nativevalue(::std::string* nativevalue) {
  if (nativevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nativevalue_;
  }
  if (nativevalue) {
    set_has_nativevalue();
    nativevalue_ = nativevalue;
  } else {
    clear_has_nativevalue();
    nativevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rexp.REXP.nativeValue)
}

// -------------------------------------------------------------------

// STRING

// optional string strval = 1;
inline bool STRING::has_strval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STRING::set_has_strval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STRING::clear_has_strval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STRING::clear_strval() {
  if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strval_->clear();
  }
  clear_has_strval();
}
inline const ::std::string& STRING::strval() const {
  // @@protoc_insertion_point(field_get:rexp.STRING.strval)
  return *strval_;
}
inline void STRING::set_strval(const ::std::string& value) {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strval_ = new ::std::string;
  }
  strval_->assign(value);
  // @@protoc_insertion_point(field_set:rexp.STRING.strval)
}
inline void STRING::set_strval(const char* value) {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strval_ = new ::std::string;
  }
  strval_->assign(value);
  // @@protoc_insertion_point(field_set_char:rexp.STRING.strval)
}
inline void STRING::set_strval(const char* value, size_t size) {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strval_ = new ::std::string;
  }
  strval_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rexp.STRING.strval)
}
inline ::std::string* STRING::mutable_strval() {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strval_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rexp.STRING.strval)
  return strval_;
}
inline ::std::string* STRING::release_strval() {
  clear_has_strval();
  if (strval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strval_;
    strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STRING::set_allocated_strval(::std::string* strval) {
  if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strval_;
  }
  if (strval) {
    set_has_strval();
    strval_ = strval;
  } else {
    clear_has_strval();
    strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rexp.STRING.strval)
}

// optional bool isNA = 2 [default = false];
inline bool STRING::has_isna() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STRING::set_has_isna() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STRING::clear_has_isna() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STRING::clear_isna() {
  isna_ = false;
  clear_has_isna();
}
inline bool STRING::isna() const {
  // @@protoc_insertion_point(field_get:rexp.STRING.isNA)
  return isna_;
}
inline void STRING::set_isna(bool value) {
  set_has_isna();
  isna_ = value;
  // @@protoc_insertion_point(field_set:rexp.STRING.isNA)
}

// -------------------------------------------------------------------

// CMPLX

// optional double real = 1 [default = 0];
inline bool CMPLX::has_real() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMPLX::set_has_real() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMPLX::clear_has_real() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMPLX::clear_real() {
  real_ = 0;
  clear_has_real();
}
inline double CMPLX::real() const {
  // @@protoc_insertion_point(field_get:rexp.CMPLX.real)
  return real_;
}
inline void CMPLX::set_real(double value) {
  set_has_real();
  real_ = value;
  // @@protoc_insertion_point(field_set:rexp.CMPLX.real)
}

// required double imag = 2;
inline bool CMPLX::has_imag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMPLX::set_has_imag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMPLX::clear_has_imag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMPLX::clear_imag() {
  imag_ = 0;
  clear_has_imag();
}
inline double CMPLX::imag() const {
  // @@protoc_insertion_point(field_get:rexp.CMPLX.imag)
  return imag_;
}
inline void CMPLX::set_imag(double value) {
  set_has_imag();
  imag_ = value;
  // @@protoc_insertion_point(field_set:rexp.CMPLX.imag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rexp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rexp::REXP_RClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rexp::REXP_RClass>() {
  return ::rexp::REXP_RClass_descriptor();
}
template <> struct is_proto_enum< ::rexp::REXP_RBOOLEAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rexp::REXP_RBOOLEAN>() {
  return ::rexp::REXP_RBOOLEAN_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rexp_2eproto__INCLUDED
